{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PLACES","namer","name","WeatherDisplay","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","weatherData","_this2","props","fetch","then","res","json","setState","react_default","a","createElement","weather","iconUrl","icon","temperat","Math","round","main","temp","temperat_max","temp_max","temperat_min","temp_min","className","src","alt","description","wind","speed","Component","App","_this3","activePlace","_this4","Navbar","Header","Brand","Grid","Row","Col","md","sm","Nav","bsStyle","stacked","activeKey","onSelect","index","map","place","NavItem","key","eventKey","App_WeatherDisplay","NewButton","href","target","rel","React","ReactDOM","render","App_NewButton","document","getElementById","numbers","ListItem","value","listItems","number","toString","Boolean","window","location","hostname","match","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b236ff1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport ReactDOM from 'react-dom';\r\nimport \"bootstrap\";\r\nimport \"bootswatch/dist/litera/bootstrap.css\";\r\nimport \"mdbootstrap/css/bootstrap.css\";\r\n//import \"mdbreact/dist/css/mdb.css\";\r\n//import \"bootstrap/dist/css/bootstrap.css\";\r\n//import Nav from \"react-bootstrap/lib/Nav\";\r\n//import Navbar from \"react-bootstrap/lib/Navbar\";\r\n//import NavItem  from \"react-bootstrap/lib/NavItem\";\r\n//import Grid  from \"react-bootstrap/lib/Grid\";\r\n//import Row  from \"react-bootstrap/lib/Row\";\r\n//import Col  from \"react-bootstrap/lib/Col\";\r\n\r\n//import {Navbar, Nav, NavItem, Grid, Row, Col} from 'mdbreact';\r\nimport { Navbar, NavItem, Nav, Grid, Row, Col } from \"react-bootstrap\";\r\n\r\nconst PLACES = [\r\n  { namer: \"Киев\", name: \"Kyiv\" },\r\n  { namer: \"Харьков\", name: \"Kharkiv\" },\r\n  { namer: \"Львов\", name: \"Lviv\" },\r\n  { namer: \"Винница\", name: \"Vinnytsia\" },\r\n  { namer: \"Чернигов\", name: \"Chernihiv\" },\r\n  { namer: \"Ивано-Франковск\", name: \"Ivano-Frankivsk\" },\r\n  { namer: \"Полтава\", name: \"Poltava\" },\r\n  { namer: \"Николаев\", name: \"Mykolayiv\" },\r\n  { namer: \"Ровно\", name: \"Rivne\" },\r\n  { namer: \"Черкасы\", name: \"Cherkasy\" }\r\n\r\n];\r\n\r\n\r\nclass WeatherDisplay extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      weatherData: null\r\n    };\r\n  }\r\n  componentDidMount() {\r\n      const name = this.props.name;\r\n\r\n\r\n     const URL = \"https://api.openweathermap.org/data/2.5/weather?q=\" +\r\n      name +\r\n        \"&appid=e8d45262db3588472ff7091896703bf4&units=metric\";\r\n        fetch(URL).then(res => res.json()).then(json => {\r\n            this.setState({ weatherData: json });\r\n      });\r\n    }\r\n  render() {\r\n    const weatherData = this.state.weatherData;\r\n    if (!weatherData) return <div>Проверяем информацию ....</div>;\r\n    const weather = weatherData.weather[0];\r\n    const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\r\n   const temperat= Math.round(weatherData.main.temp);\r\n   const temperat_max= Math.round(weatherData.main.temp_max);\r\n   const temperat_min= Math.round(weatherData.main.temp_min);\r\n //const speed_wind= Math.round(0.44704*(weatherData.wind.speed));\r\n    return (\r\n\r\n      <div>\r\n        <h1 className=\"main_text\">\r\n        {weather.main} in {weatherData.name}\r\n          <img src={iconUrl} alt={weatherData.description} />\r\n        </h1>\r\n\r\n        <p>Сейчас погода: {temperat}°</p>\r\n        <p>Максилальная темп.:  { temperat_max}°</p>\r\n        <p>Минимальная темп.: {temperat_min}°</p>\r\n        <p>Скорость ветра:  {weatherData.wind.speed} м/с</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      activePlace: 0\r\n    };\r\n  }\r\n  render() {\r\n    const activePlace = this.state.activePlace;\r\n    return (\r\n      <div>\r\n        <Navbar>\r\n          <Navbar.Header>\r\n            <Navbar.Brand>\r\n            <h2>\r\n              React Weather\r\n              </h2>\r\n            </Navbar.Brand>\r\n          </Navbar.Header>\r\n        </Navbar>\r\n        <Grid>\r\n          <Row>\r\n            <Col md={4} sm={4}>\r\n              <h3 className=\"text_select\">Выбор города</h3>\r\n\r\n                <Nav bsStyle=\"pills\" stacked activeKey={activePlace} onSelect={index => {\r\n                  this.setState({ activePlace: index });\r\n                }}\r\n              >\r\n                {PLACES.map((place, index) => (\r\n                  <NavItem key={index} eventKey={index}>{place.namer}</NavItem>\r\n                ))}\r\n              </Nav>\r\n            </Col>\r\n            <Col md={8} sm={8}>\r\n           <WeatherDisplay key={activePlace} name={PLACES[activePlace].name} />\r\n            </Col>\r\n          </Row>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass NewButton extends React.Component {\r\n  render() {\r\n     const url = 'App_cal.js';\r\n    return (\r\n\r\n      //<button onclick=\"window.open.href='/App_cal'\">Continue</button>\r\n     //<a className=\"mybutton\" href=\"App_cal.js\"> Календарь </a>\r\n    //<a className=\"mybutton\" href={url} target=\"_blank\" rel=\"noopener noreferrer\"> Календарь </a>\r\n    <a  className=\"mybutton\" href=\"https://irinakir.github.io/calendar/\" target=\"_blank\"  rel=\"noopener noreferrer\">  Календарь  </a>\r\n      //  <button onclick= \"window.open(url,  '_blank')\">Continue</button>\r\n    //  <button className=\"mybutton\" onClick={() => window.open(url, '_blank')}>\r\n    //    Календарь\r\n    //  </button>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nReactDOM.render(\r\n  <NewButton />,\r\n  document.getElementById('buttonroot')\r\n);\r\n\r\n\r\nconst dz1=<a href=\"https://irinakir.github.io/\" target=\"_blank\"  rel=\"noopener noreferrer\">1 работа</a>;\r\nconst dz2=<a href=\"https://irinakir.github.io/site.github.io/\" target=\"_blank\"  rel=\"noopener noreferrer\">2 работа</a>;\r\nconst dz3=<a href=\"https://irinakir.github.io/web_project/\" target=\"_blank\" rel=\"noopener noreferrer\">3 работа</a>;\r\nconst dz4=<a href=\"https://irinakir.github.io/site.github.io/curriculum_vitae.html\" target=\"_blank\"  rel=\"noopener noreferrer\">CV</a>;\r\n\r\nconst numbers = [dz1, dz2, dz3, dz4];\r\nfunction ListItem(props) {\r\n  // Correct! There is no need to specify the key here:\r\n  return <li>{props.value}</li>;\r\n}\r\n\r\nfunction NumberList(props) {\r\n  const numbers = props.numbers;\r\n  const listItems = numbers.map((number) =>\r\n    // Correct! Key should be specified inside the array.\r\n    <ListItem key={number.toString()}\r\n              value={number} />\r\n\r\n  );\r\n  return (\r\n    <ul>\r\n      {listItems}\r\n    </ul>\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  <NumberList numbers={numbers}/>,\r\n  document.getElementById('linkroot')\r\n);\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}