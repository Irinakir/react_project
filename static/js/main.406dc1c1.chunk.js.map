{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PLACES","namer","name","WeatherDisplay","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","weatherData","_this2","props","fetch","then","res","json","setState","react_default","a","createElement","weather","iconUrl","icon","className","main","src","alt","description","temp","temp_max","temp_min","wind","speed","Component","App","_this3","activePlace","_this4","Navbar","Header","Brand","Grid","Row","Col","md","sm","Nav","bsStyle","stacked","activeKey","onSelect","index","map","place","NavItem","key","eventKey","App_WeatherDisplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.406dc1c1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"bootswatch/dist/litera/bootstrap.css\";\r\n\r\n//import \"bootstrap/dist/css/bootstrap.css\";\r\n//import Nav from \"react-bootstrap/lib/Nav\";\r\n//import Navbar from \"react-bootstrap/lib/Navbar\";\r\n//import NavItem  from \"react-bootstrap/lib/NavItem\";\r\n//import Grid  from \"react-bootstrap/lib/Grid\";\r\n//import Row  from \"react-bootstrap/lib/Row\";\r\n//import Col  from \"react-bootstrap/lib/Col\";\r\nimport { Navbar, NavItem, Nav, Grid, Row, Col } from \"react-bootstrap\";\r\n\r\nconst PLACES = [\r\n  { namer: \"Киев\", name: \"Kyiv\" },\r\n  { namer: \"Харьков\", name: \"Kharkiv\" },\r\n  { namer: \"Львов\", name: \"Lviv\" },\r\n  { namer: \"Винница\", name: \"Vinnytsia\" },\r\n  { namer: \"Чернигов\", name: \"Chernihiv\" },\r\n  { namer: \"Ивано-Франковск\", name: \"Ivano-Frankivsk\" },\r\n  { namer: \"Полтава\", name: \"Poltava\" },\r\n  { namer: \"Николаев\", name: \"Mykolayiv\" },\r\n  { namer: \"Одесса\", name: \"Odessa\" },\r\n  { namer: \"Черкасы\", name: \"Cherkasy\" }\r\n\r\n];\r\n\r\nclass WeatherDisplay extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      weatherData: null\r\n    };\r\n  }\r\n  componentDidMount() {\r\n      const name = this.props.name;\r\n      const URL = \"http://api.openweathermap.org/data/2.5/weather?q=\" +\r\n      name +\r\n        \"&appid=e8d45262db3588472ff7091896703bf4&units=metric\";\r\n        fetch(URL).then(res => res.json()).then(json => {\r\n            this.setState({ weatherData: json });\r\n      });\r\n    }\r\n  render() {\r\n    const weatherData = this.state.weatherData;\r\n    if (!weatherData) return <div>Проверяем информацию ....</div>;\r\n    const weather = weatherData.weather[0];\r\n    const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\r\n  //  const temperat= Math.round((weatherData.main.temp - 32) / 1.8);\r\n  //  const temperat_max= Math.round((weatherData.main.temp_max - 32) / (5/9));\r\n  //  const temperat_min= Math.round((weatherData.main.temp_min - 32) / (5/9));\r\n //const speed_wind= Math.round(0.44704*(weatherData.wind.speed));\r\n    return (\r\n\r\n      <div>\r\n        <h1 className=\"main_text\">\r\n        {weather.main} in {weatherData.name}\r\n          <img src={iconUrl} alt={weatherData.description} />\r\n        </h1>\r\n\r\n        <p>Сейчас погода: {weatherData.main.temp}°</p>\r\n        <p>Максилальная темп.:  {weatherData.main.temp_max}°</p>\r\n        <p>Минимальная темп.: {weatherData.main.temp_min}°</p>\r\n        <p>Скорость ветра:  {weatherData.wind.speed} mi/hr</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      activePlace: 0\r\n    };\r\n  }\r\n  render() {\r\n    const activePlace = this.state.activePlace;\r\n    return (\r\n      <div>\r\n        <Navbar>\r\n          <Navbar.Header>\r\n            <Navbar.Brand>\r\n            <h2 className=\"textbig\">\r\n              Пример React Weather App\r\n              </h2>\r\n            </Navbar.Brand>\r\n          </Navbar.Header>\r\n        </Navbar>\r\n        <Grid>\r\n          <Row>\r\n            <Col md={4} sm={4}>\r\n              <h3 className=\"text_select\">Выбор города</h3>\r\n\r\n                <Nav bsStyle=\"pills\" stacked activeKey={activePlace} onSelect={index => {\r\n                  this.setState({ activePlace: index });\r\n                }}\r\n              >\r\n                {PLACES.map((place, index) => (\r\n                  <NavItem key={index} eventKey={index}>{place.namer}</NavItem>\r\n                ))}\r\n              </Nav>\r\n            </Col>\r\n            <Col md={8} sm={8}>\r\n           <WeatherDisplay key={activePlace} name={PLACES[activePlace].name} />\r\n            </Col>\r\n          </Row>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}